// Prisma schema
// https://pris.ly/d/prisma-schema

// Don't use citext in the time being
// https://github.com/prisma/prisma/issues/6944
// https://github.com/prisma/prisma/issues/5772

datasource db {
  provider = "postgresql"
  url      = env("PRISMA_DATABASE_URL")
}

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["referentialActions"]
}

// -----------------------------------------------------------------------------
// User and Profile
// Email and password are in User
// Other fields are in Profile

// Copy of auth.users
model User {
  id    String @id
  email String @unique

  profile         Profile?
  adminProfile    AdminProfile?
  fundBeneficiary FundBeneficiary?

  // Timestamp
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@map(name: "users")
}

model Profile {
  id        String  @id @default(cuid())
  handle    String? @unique // username
  name      String?
  avatarUrl String?
  phone     String?

  // Relation: User
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String

  // Relation: Address
  addresses         Address[]
  // Relation: Wholesaler
  wholesalers       Wholesaler[]
  // Relation: Supplier
  suppliers         Supplier[]
  supplierProducts  SupplierProduct[]
  // Relation: BusinessOrder
  businessOrders    BusinessOrder[]
  // Relation: Merchant
  merchants         Merchant[]
  merchantProducts  MerchantProduct[]
  // Relation: FundBeneficiary
  fundBeneficiaries FundBeneficiary?

  // Timestamp
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@map(name: "profiles")
}

model AdminProfile {
  id String @id @default(cuid())

  // Relations
  userId String
  user   User   @relation(fields: [userId], references: [id])

  // Timestamp
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@map(name: "admin_profiles")
}

// -----------------------------------------------------------------------------
// Address can be used for Profile, Wholesaler, Supplier, Merchant, Customer

model Address {
  id String @id @default(cuid())

  street        String // Jl. Street Name
  streetDetails String? // Optional details such as floor number
  ward          String? // Kelurahan
  subdistrict   String? // Kecamatan
  city          String?
  state         String? // Province
  zip           String? // Postal code
  countryCode   String? // Save as ID, not Indonesia

  // Relations
  profileId              String?
  profile                Profile?        @relation(fields: [profileId], references: [id])
  wholesalerId           String?
  wholesaler             Wholesaler?     @relation(fields: [wholesalerId], references: [id])
  supplierId             String?
  supplier               Supplier?       @relation(fields: [supplierId], references: [id])
  merchantId             String?
  merchant               Merchant?       @relation(fields: [merchantId], references: [id])
  shipmentBusinessOrders BusinessOrder[]

  // Timestamp
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@map(name: "addresses")
}

// -----------------------------------------------------------------------------
// Wholesaler

model Wholesaler {
  id     String @id @default(cuid())
  handle String @unique
  name   String

  // Relations
  addresses Address[]
  ownerId   String // Currently the owner should only be Qopnet Admin
  owner     Profile   @relation(fields: [ownerId], references: [id])

  // Timestamp
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@map(name: "wholesalers")
}

// -----------------------------------------------------------------------------
// Supplier

enum SupplierCategory {
  PRODUCER
  DISTRIBUTOR
}

// Need to be extra careful when dealing with the fields here
// Don't modify without migrate
model Supplier {
  id String @id @default(cuid())

  handle String? @unique
  name   String?
  phone  String?
  email  String?

  avatarUrl         String?
  nationalTax       String?
  certificationFile String?
  category          SupplierCategory?

  // Relations
  ownerId            String?
  owner              Profile?            @relation(fields: [ownerId], references: [id])
  addresses          Address[]
  supplierProducts   SupplierProduct[]
  businessOrderItems BusinessOrderItem[]

  // Timestamp
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@map(name: "suppliers")
}

// -----------------------------------------------------------------------------
// Supplier Product

enum SupplierProductWeightUnit {
  GR
  KG
  TON
}

enum SupplierProductStatus {
  ACTIVE
  INACTIVE
}

model SupplierProduct {
  id String @id @default(cuid())

  images Json? // string[]
  slug   String? @unique

  // Info
  name        String?
  subname     String?
  description String?
  sku         String?
  category    String?
  tags        Json?

  // Price
  price                Decimal? @db.Money
  priceMax             Decimal? @db.Money
  priceMin             Decimal? @db.Money
  minOrder             Int?
  discount             Int?
  discountMaxReduction Decimal? @db.Money

  // Weight and Dimension Size
  weight        Int? // Ceil to upper bound, not using Float
  weightUnit    SupplierProductWeightUnit?
  weightDetails String?
  dimension     Json? // { width, height, length }

  // Manage
  status SupplierProductStatus?
  stock  Int?

  // Relations
  ownerId            String?
  owner              Profile?            @relation(fields: [ownerId], references: [id])
  supplierId         String?
  supplier           Supplier?           @relation(fields: [supplierId], references: [id])
  businessOrderItems BusinessOrderItem[]

  // Timestamp
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@map(name: "supplier_products")
}

// -----------------------------------------------------------------------------
// Merchant

model Merchant {
  id String @id @default(cuid())

  // Info
  handle    String  @unique
  name      String
  phone     String?
  email     String?
  avatarUrl String?

  // Relations
  ownerId          String?
  owner            Profile?          @relation(fields: [ownerId], references: [id])
  addresses        Address[]
  merchantProducts MerchantProduct[]

  // Timestamp
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@map(name: "merchants")
}

enum MerchantProductStatus {
  ACTIVE
  INACTIVE
}

model MerchantProduct {
  id String @id @default(cuid())

  // Info
  images      Json? // string[]
  slug        String? @unique
  name        String?
  category    String?
  sku         String?
  description String?

  // Price
  price    Decimal? @db.Money
  discount Int?

  // Manage
  status MerchantProductStatus?

  // Relations
  ownerId    String?
  owner      Profile?  @relation(fields: [ownerId], references: [id])
  merchantId String?
  merchant   Merchant? @relation(fields: [merchantId], references: [id])

  // Timestamp
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@map(name: "merchant_products")
}

// -----------------------------------------------------------------------------
// Financing

model FinancingService {
  id     String  @id @default(cuid())
  handle String? @unique

  name    String?
  website String?
  phone   String?

  // Relations
  fundBeneficiariesRequests FundBeneficiary[]
  fundBenefactors           FundBenefactor[]

  // Timestamp
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@map(name: "financing_services")
}

enum FundBeneficiaryStatus {
  PENDING
  ACCEPTED
  REJECTED
}

model FundBeneficiary {
  id String @id @default(cuid())

  // Relations can also include access to Merchants
  userId    String?
  user      User?    @relation(fields: [userId], references: [id])
  profileId String?
  profile   Profile? @relation(fields: [profileId], references: [id])

  // Other personal info
  nationalId String?
  birthPlace String?
  birthDate  DateTime?
  income     Decimal?               @db.Money
  status     FundBeneficiaryStatus?

  // Relations
  financingServiceId String?
  financingService   FinancingService? @relation(fields: [financingServiceId], references: [id])

  // Timestamp
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@map(name: "fund_beneficiaries")
}

model FundBenefactor {
  id String @id @default(cuid())

  // Relations
  financingServiceId String?
  financingService   FinancingService? @relation(fields: [financingServiceId], references: [id])

  // Timestamp
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@map(name: "fund_benefactors")
}

// -----------------------------------------------------------------------------
// BUSINESS ORDER

enum OrderStatus {
  // order is still a cart
  DRAFT

  // order is waiting to be paid by buyer
  WAITING_FOR_PAYMENT

  // payment has been made, but still in process
  // PAYMENT_IN_PROCESS

  // order has been paid, confirmed by wholesaler/supplier
  PAID

  // waiting confirmation from wholesaler/supplier
  WAITING_FOR_CONFIRMATION

  // supplier processed order internally
  PROCESSED

  // supplier waiting for pickup by courier
  WAITING_FOR_PICKUP

  // supplier product is on delivery by courier
  ONDELIVERY
  // ON_DELIVERY

  // supplier product is delivered to shipment address
  DELIVERED

  // confirmed by recipient
  CONFIRMED

  // confirmed, product arrived but something wrong, include lost
  COMPLAINED

  // before PAID | PROCESSED | ONDELIVERY
  CANCELED

  // somewhere after PAID
  REFUNDED
}

model BusinessOrder {
  id     String       @id @default(cuid())
  status OrderStatus?

  // Relation: Profile
  ownerId String?
  owner   Profile? @relation(fields: [ownerId], references: [id])

  // Relation: BusinessOrderItem
  businessOrderItems BusinessOrderItem[]

  // Relation: Shipment Address
  shipmentAddress   Address? @relation(fields: [shipmentAddressId], references: [id])
  shipmentAddressId String?

  // Relation: Shipment Courier
  shipmentCourier   Courier? @relation(fields: [shipmentCourierId], references: [id])
  shipmentCourierId String?

  // Relation: Shipment CourierVehicle
  shipmentCourierVehicle   CourierVehicle? @relation(fields: [shipmentCourierVehicleId], references: [id])
  shipmentCourierVehicleId String?

  // Relation: PaymentMethod
  paymentMethod   PaymentMethod? @relation(fields: [paymentMethodId], references: [id])
  paymentMethodId String?

  // Relation: PaymentRecord
  paymentRecord   PaymentRecord? @relation(fields: [paymentRecordId], references: [id])
  paymentRecordId String?

  // Calculation for business order items
  totalItems            Int?
  totalWeight           Int?
  totalPrice            Decimal? @db.Money
  totalShippingCost     Decimal? @db.Money
  totalShippingDiscount Decimal? @db.Money
  totalPayment          Decimal? @db.Money
  totalBillPayment      Decimal? @db.Money

  // Timestamp
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@map(name: "business_orders")
}

model BusinessOrderItem {
  id String @id @default(cuid())

  quantity Int @default(1)

  // Relation: Business order
  businessOrderId String
  businessOrder   BusinessOrder @relation(fields: [businessOrderId], references: [id])

  // Relation: Supplier product
  supplierProductId String
  supplierProduct   SupplierProduct @relation(fields: [supplierProductId], references: [id])

  // Relation: Supplier
  supplierId String
  supplier   Supplier @relation(fields: [supplierId], references: [id])

  // Timestamp
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@map(name: "business_order_items")
}

// -----------------------------------------------------------------------------
// COURIER

model Courier {
  id String @id @default(cuid())

  name String // Courier name: Lalamove, Deliveree, Mas Kargo

  // Relations
  businessOrders  BusinessOrder[]
  courierVehicles CourierVehicle[]

  // Timestamp
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@map(name: "couriers")
}

model CourierVehicle {
  id String @id @default(cuid())

  name String // Courier vehicle name or type: Car, Mobil Box, Tronton

  // Check again in Deliveree/Lalamove
  maxWeightCapacity           Int? // in kg
  maxCargoDimensionLength     Int? // in cm
  maxCargoDimensionHeight     Int? // in cm
  maxCargoDimensionWidth      Int? // in cm
  maxCargoDimensionCubicMeter Float? // in m^3

  // Relation: BusinessOrder
  businessOrders BusinessOrder[]

  // Relation: Courier
  courierId String?
  courier   Courier? @relation(fields: [courierId], references: [id])

  // Timestamp
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@map(name: "courier_vehicles")
}

// -----------------------------------------------------------------------------
// PAYMENT

enum PaymentCategory {
  CASH_ON_DELIVERY
  TRANSFER_MANUAL
  TRANSFER_VIRTUAL_ACCOUNT
  INSTALMENT
  CREDIT
  LOAN
}

model PaymentMethod {
  id String @id @default(cuid())

  name            String
  paymentCategory PaymentCategory

  // Relation: BusinessOrder
  businessOrders BusinessOrder[]

  // Relation: PaymentRecord
  paymentRecords PaymentRecord[]

  // Timestamp
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@map(name: "payment_methods")
}

model PaymentRecord {
  id String @id @default(cuid())

  amount Decimal @db.Money
  // status String?

  // Relation: BusinessOrder
  businessOrder BusinessOrder?

  // Relation: PaymentMethod
  paymentMethodId String?
  paymentMethod   PaymentMethod? @relation(fields: [paymentMethodId], references: [id])

  // Timestamp
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@map(name: "payment_records")
}

// -----------------------------------------------------------------------------
// PROMO

// PromoProvider
// Example:
// - Koperasi Panarub with Bank Permata = Rp X
// - Koperasi Nelayan with Bank BRI = Rp X
model PromoProvider {
  id String @id @default(cuid())

  name        String?
  description String?

  submissions PromoSubmission[]

  @@map(name: "promo_providers")
}

enum PromoSubmissionStatus {
  PENDING // Submission diterima
  APPROVED // Lolos seleksi
}

model PromoSubmission {
  id String @id @default(cuid())

  // Bio
  name       String?
  phone      String?
  email      String?
  birthPlace String?
  birthDate  DateTime?
  nationalId String?

  // Address
  street        String? // Jl. Street Name
  streetDetails String? // Optional details such as floor number
  city          String? // Ex: Tangerang
  state         String? // Province. Ex: Banten
  zip           String? // Postal code

  // Status
  status PromoSubmissionStatus?

  // Relations
  providerId String?
  provider   PromoProvider? @relation(fields: [providerId], references: [id])

  @@map(name: "promo_submissions")
}

model PromoEmployee {
  id    String @id @default(cuid())
  order Int // original order number on employer document

  // Bio
  employeeId String?
  name       String?
  phone      String? // required for financing
  email      String? // required for financing
  birthPlace String?
  birthDate  DateTime? // required for financing
  nationalId String? // KTP

  // Address
  street        String?
  streetDetails String?
  city          String?
  State         String?
  zip           String?

  // relations
  employerId String?
  employer   PromoEmployer? @relation(fields: [employerId], references: [id])

  @@map(name: "promo_employees")
}

model PromoEmployer {
  id String @id @default(cuid())

  name  String?
  email String?
  phone String?

  // relations
  employees PromoEmployee[]

  @@map(name: "promo_employers")
}
