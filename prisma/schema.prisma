// Prisma schema
// https://pris.ly/d/prisma-schema

// Don't use citext in the time being
// https://github.com/prisma/prisma/issues/6944
// https://github.com/prisma/prisma/issues/5772

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

// -----------------------------------------------------------------------------
// User and Profile
// Email and password are in User
// Other fields are in Profile

// Copy of auth.users
model User {
  id           String        @id
  email        String        @unique
  profile      Profile?
  adminProfile AdminProfile?

  @@map(name: "users")
}

model Profile {
  id        String  @id @default(cuid())
  handle    String? @unique // username
  name      String?
  avatarUrl String?
  phone     String?

  // User Relations
  userId String
  user   User   @relation(fields: [userId], references: [id])

  // Data Relations
  addresses        Address[]
  wholesalers      Wholesaler[]
  suppliers        Supplier[]
  supplierProducts SupplierProduct[]
  merchants        Merchant[]

  // Timestamp
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  @@map(name: "profiles")
}

model AdminProfile {
  id String @id @default(cuid())

  // Relations
  userId String
  user   User   @relation(fields: [userId], references: [id])

  // Timestamp
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  @@map(name: "admin_profiles")
}

// -----------------------------------------------------------------------------
// Address can be used for Profile, Wholesaler, Supplier, Merchant, Customer

model Address {
  id            String @id @default(cuid())
  street        String // Jl. Street Name
  streetDetails String // Optional details such as floor number
  city          String
  state         String // Province
  zip           String // Postal code
  countryCode   String // Save as ID, not Indonesia

  // Relations
  profileId    String?
  profile      Profile?    @relation(fields: [profileId], references: [id])
  wholesalerId String?
  wholesaler   Wholesaler? @relation(fields: [wholesalerId], references: [id])
  supplierId   String?
  supplier     Supplier?   @relation(fields: [supplierId], references: [id])
  merchantId   String?
  merchant     Merchant?   @relation(fields: [merchantId], references: [id])

  // Timestamp
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  @@map(name: "addresses")
}

// -----------------------------------------------------------------------------
// Wholesaler

model Wholesaler {
  id     String @id @default(cuid())
  handle String @unique
  name   String

  // Relations
  addresses Address[]
  ownerId   String // Currently the owner should only be Qopnet Admin
  owner     Profile   @relation(fields: [ownerId], references: [id])

  // Timestamp
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  @@map(name: "wholesalers")
}

// -----------------------------------------------------------------------------
// Supplier

enum SupplierCategory {
  PRODUCER
  DISTRIBUTOR
}

model Supplier {
  id                String            @id @default(cuid())
  handle            String?           @unique
  name              String?
  avatarUrl         String?
  nationalTax       String?
  certificationFile String?
  category          SupplierCategory?

  // Relations
  ownerId          String?
  owner            Profile?          @relation(fields: [ownerId], references: [id])
  addresses        Address[]
  supplierProducts SupplierProduct[]

  // Timestamp
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  @@map(name: "suppliers")
}

model SupplierProduct {
  id          String   @id @default(cuid())
  slug        String?  @unique
  sku         String?
  name        String?
  description String?
  price       Decimal? @db.Money
  priceMax    Decimal? @db.Money
  priceMin    Decimal? @db.Money
  images      Json?

  // Relations
  supplierId String?
  supplier   Supplier? @relation(fields: [supplierId], references: [id])
  ownerId    String
  owner      Profile   @relation(fields: [ownerId], references: [id])

  // Timestamp
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  @@map(name: "supplier_products")
}

// -----------------------------------------------------------------------------
// Merchant

model Merchant {
  id        String  @id @default(cuid())
  handle    String  @unique
  name      String
  avatarUrl String?

  // Relations
  ownerId   String?
  owner     Profile?  @relation(fields: [ownerId], references: [id])
  addresses Address[]

  // Timestamp
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  @@map(name: "merchants")
}
