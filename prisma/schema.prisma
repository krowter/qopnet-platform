// Prisma schema
// https://pris.ly/d/prisma-schema

// Don't use citext in the time being
// https://github.com/prisma/prisma/issues/6944
// https://github.com/prisma/prisma/issues/5772

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

// -----------------------------------------------------------------------------
// User and Profile
// Email and password are in User
// Other fields are in Profile

// Copy of auth.users
model User {
  id    String @id
  email String @unique

  profile         Profile?
  adminProfile    AdminProfile?
  fundBeneficiary FundBeneficiary?

  @@map(name: "users")
}

model Profile {
  id        String  @id @default(cuid())
  handle    String? @unique // username
  name      String?
  avatarUrl String?
  phone     String?

  // User Relations
  userId String
  user   User   @relation(fields: [userId], references: [id])

  // Data Relations
  addresses         Address[]
  wholesalers       Wholesaler[]
  suppliers         Supplier[]
  supplierProducts  SupplierProduct[]
  merchants         Merchant[]
  fundBeneficiaries FundBeneficiary?

  // Timestamp
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  MerchantProduct MerchantProduct[]
  @@map(name: "profiles")
}

model AdminProfile {
  id String @id @default(cuid())

  // Relations
  userId String
  user   User   @relation(fields: [userId], references: [id])

  // Timestamp
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  @@map(name: "admin_profiles")
}

// -----------------------------------------------------------------------------
// Address can be used for Profile, Wholesaler, Supplier, Merchant, Customer

model Address {
  id            String @id @default(cuid())
  street        String // Jl. Street Name
  streetDetails String // Optional details such as floor number
  city          String
  state         String // Province
  zip           String // Postal code
  countryCode   String // Save as ID, not Indonesia

  // Relations
  profileId    String?
  profile      Profile?    @relation(fields: [profileId], references: [id])
  wholesalerId String?
  wholesaler   Wholesaler? @relation(fields: [wholesalerId], references: [id])
  supplierId   String?
  supplier     Supplier?   @relation(fields: [supplierId], references: [id])
  merchantId   String?
  merchant     Merchant?   @relation(fields: [merchantId], references: [id])

  // Timestamp
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  @@map(name: "addresses")
}

// -----------------------------------------------------------------------------
// Wholesaler

model Wholesaler {
  id     String @id @default(cuid())
  handle String @unique
  name   String

  // Relations
  addresses Address[]
  ownerId   String // Currently the owner should only be Qopnet Admin
  owner     Profile   @relation(fields: [ownerId], references: [id])

  // Timestamp
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  @@map(name: "wholesalers")
}

// -----------------------------------------------------------------------------
// Supplier

enum SupplierCategory {
  PRODUCER
  DISTRIBUTOR
}

// Need to be extra careful when dealing with the fields here
// Don't modify without migrate
model Supplier {
  id String @id @default(cuid())

  handle String? @unique
  name   String?
  phone  String?
  email  String?

  avatarUrl         String?
  nationalTax       String?
  certificationFile String?
  category          SupplierCategory?

  // Relations
  ownerId          String?
  owner            Profile?          @relation(fields: [ownerId], references: [id])
  addresses        Address[]
  supplierProducts SupplierProduct[]

  // Timestamp
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())


  @@map(name: "suppliers")
}

// -----------------------------------------------------------------------------
// Supplier Product

enum SupplierProductWeightUnit {
  GR
  KG
  TON
}

enum SupplierProductStatus {
  ACTIVE
  INACTIVE
}

model SupplierProduct {
  id String @id @default(cuid())

  images Json? // string[]
  slug   String? @unique

  // Info
  name        String?
  subname     String?
  category    String?
  sku         String?
  description String?

  // Price
  price                Decimal? @db.Money
  priceMax             Decimal? @db.Money
  priceMin             Decimal? @db.Money
  minOrder             Int?
  discount             Int?
  discountMaxReduction Decimal? @db.Money

  // Weight and Size
  weight        Int?
  weightUnit    SupplierProductWeightUnit?
  weightDetails String?
  dimension     Json?

  // Manage
  status SupplierProductStatus?
  stock  Int?

  // Relations
  ownerId    String?
  owner      Profile?  @relation(fields: [ownerId], references: [id])
  supplierId String?
  supplier   Supplier? @relation(fields: [supplierId], references: [id])

  // Timestamp
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  @@map(name: "supplier_products")
}

// -----------------------------------------------------------------------------
// Merchant

model Merchant {
  id String @id @default(cuid())

  // Info
  handle    String  @unique
  name      String
  phone     String?
  email     String?
  avatarUrl String?

  // Relations
  ownerId          String?
  owner            Profile?          @relation(fields: [ownerId], references: [id])
  addresses        Address[]
  merchantProducts MerchantProduct[]

  // Timestamp
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  @@map(name: "merchants")
}

enum MerchantProductStatus {
  ACTIVE
  INACTIVE
}

model MerchantProduct {
  id String @id @default(cuid())

  // Info
  images      Json? // string[]
  slug        String? @unique
  name        String?
  category    String?
  sku         String?
  description String?

  // Price
  price    Decimal? @db.Money
  discount Int?

  // Manage
  status MerchantProductStatus?

  // Relations
  ownerId    String?
  owner      Profile?  @relation(fields: [ownerId], references: [id])
  merchantId String?
  merchant   Merchant? @relation(fields: [merchantId], references: [id])

  // Timestamp
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  @@map(name: "merchant_products")
}

// -----------------------------------------------------------------------------
// Financing

model FinancingService {
  id     String  @id @default(cuid())
  handle String? @unique

  name    String?
  website String?
  phone   String?

  // Relations
  fundBeneficiariesRequests FundBeneficiary[]
  fundBenefactors           FundBenefactor[]

  // Timestamp
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  @@map(name: "financing_services")
}

enum FundBeneficiaryStatus {
  PENDING
  ACCEPTED
  REJECTED
}

model FundBeneficiary {
  id String @id @default(cuid())

  // Relations include access to Merchants
  profile Profile? @relation(fields: [profileId], references: [id])
  user    User?    @relation(fields: [userId], references: [id])

  // Other personal info
  nationalId String?
  birthPlace String?
  birthDate  DateTime?
  income     Decimal?               @db.Money
  status     FundBeneficiaryStatus?

  // Relations
  financingServiceId String?
  financingService   FinancingService? @relation(fields: [financingServiceId], references: [id])

  // Timestamp
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  profileId String?
  userId    String?
  @@map(name: "fund_beneficiaries")
}

model FundBenefactor {
  id String @id @default(cuid())

  // Relations
  financingServiceId String?
  financingService   FinancingService? @relation(fields: [financingServiceId], references: [id])

  // Timestamp
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  @@map(name: "fund_benefactors")
}
